{"ast":null,"code":"var _jsxFileName = \"D:\\\\React JS\\\\SWAPI Moviez\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\n// https://swapi.dev/api/films/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      // const response = await fetch(\"https://swapi.dev/api/films/\");\n      const response = await fetch(\"https://moviez-48a5a-default-rtdb.firebaseio.com/movies.json\");\n      // console.log(response);\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong :(\");\n      }\n      const data = await response.json();\n      // console.log(data);\n\n      const loadedMovies = [];\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n  const addMovieHandler = async movie => {\n    const response = await fetch(\"https://moviez-48a5a-default-rtdb.firebaseio.com/movies.json\", {\n      method: \"POST\",\n      body: JSON.stringify(movie),\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    // console.log(data);\n    console.log(movie);\n  };\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No movies found!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 19\n  }, this);\n  if (movies.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(MoviesList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 19\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 19\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 19\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(AddMovie, {\n        onAddMovie: addMovieHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"/djrXmupudGJZ4TEuxAjJK8qFwI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","jsxDEV","_jsxDEV","App","_s","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","loadedMovies","key","push","id","title","openingText","releaseDate","message","addMovieHandler","movie","method","body","JSON","stringify","headers","console","log","content","children","fileName","_jsxFileName","lineNumber","columnNumber","length","Fragment","onAddMovie","onClick","_c","$RefreshReg$"],"sources":["D:/React JS/SWAPI Moviez/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\n// https://swapi.dev/api/films/\n\nfunction App() {\n    const [movies, setMovies] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const fetchMoviesHandler = useCallback(async () => {\n        try {\n            setIsLoading(true);\n            setError(null);\n            // const response = await fetch(\"https://swapi.dev/api/films/\");\n            const response = await fetch(\n                \"https://moviez-48a5a-default-rtdb.firebaseio.com/movies.json\"\n            );\n            // console.log(response);\n\n            if (!response.ok) {\n                throw new Error(\"Something went wrong :(\");\n            }\n\n            const data = await response.json();\n            // console.log(data);\n\n            const loadedMovies = [];\n\n            for (const key in data) {\n                loadedMovies.push({\n                    id: key,\n                    title: data[key].title,\n                    openingText: data[key].openingText,\n                    releaseDate: data[key].releaseDate,\n                });\n            }\n            setMovies(loadedMovies);\n        } catch (error) {\n            setError(error.message);\n        }\n        setIsLoading(false);\n    }, []);\n\n    useEffect(() => {\n        fetchMoviesHandler();\n    }, [fetchMoviesHandler]);\n\n    const addMovieHandler = async (movie) => {\n        const response = await fetch(\n            \"https://moviez-48a5a-default-rtdb.firebaseio.com/movies.json\",\n            {\n                method: \"POST\",\n                body: JSON.stringify(movie),\n                headers: {\n                    \"Content-type\": \"application/json\",\n                },\n            }\n        );\n        const data = await response.json();\n        // console.log(data);\n        console.log(movie);\n    };\n\n    let content = <p>No movies found!</p>;\n\n    if (movies.length > 0) {\n        content = <MoviesList movies={movies} />;\n    }\n\n    if (error) {\n        content = <p>{error}</p>;\n    }\n\n    if (isLoading) {\n        content = <p>Loading...</p>;\n    }\n\n    return (\n        <React.Fragment>\n            <section>\n                <AddMovie onAddMovie={addMovieHandler} />\n            </section>\n            <section>\n                <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n            </section>\n            <section>{content}</section>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}