{"ast":null,"code":"var _jsxFileName = \"D:\\\\React JS\\\\19-ToDo using Typescript\\\\src\\\\components\\\\NewTodo.tsx\",\n    _s = $RefreshSig$();\n\n// import React, { FC, MutableRefObject, useRef, useState } from \"react\";\n// import styles from \"./NewTodo.module.css\";\n// const NewTodo: FC<{ onAddTodo: (text: string) => void }> = (props) => {\n// \t// const [enteredText, setEnteredText] = useState(\"\")\n// \tconst ref = useRef<HTMLInputElement>(null);\n// \tconst submitHandler = (e: React.FormEvent) => {\n// \t\te.preventDefault();\n// \t\tconst enteredText = ref.current!.value;\n// \t\tif (enteredText.trim().length === 0) {\n// \t\t\t// trow errors\n// \t\t\treturn;\n// \t\t}\n// \t\tprops.onAddTodo(enteredText);\n// \t\t// const change\n// \t};\n// \treturn (\n// \t\t<form className={styles.form} onSubmit={submitHandler}>\n// \t\t\t<label htmlFor=\"text\"></label>\n// \t\t\t<input type=\"text\" id=\"text\" ref={ref} />\n// \t\t\t<button type=\"submit\">Add todo</button>\n// \t\t</form>\n// \t);\n// };\n// export default NewTodo;\nimport React, { useState } from \"react\";\nimport styles from \"./NewTodo.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewTodo = props => {\n  _s();\n\n  const [enteredText, setEnteredText] = useState(\"\");\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (enteredText.trim().length === 0) {\n      // Handle errors here if needed.\n      return;\n    }\n\n    props.onAddTodo(enteredText); // Clear the input field by updating the state.\n\n    setEnteredText(\"\");\n  };\n\n  const textChangeHandler = event => {\n    setEnteredText(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: styles.form,\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"text\",\n      value: enteredText,\n      onChange: textChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Add todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 3\n  }, this);\n};\n\n_s(NewTodo, \"znzL/pmtkvVt3hZyJzgC7WHc9/8=\");\n\n_c = NewTodo;\nexport default NewTodo;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTodo\");","map":{"version":3,"names":["React","useState","styles","NewTodo","props","enteredText","setEnteredText","submitHandler","e","preventDefault","trim","length","onAddTodo","textChangeHandler","event","target","value","form"],"sources":["D:/React JS/19-ToDo using Typescript/src/components/NewTodo.tsx"],"sourcesContent":["// import React, { FC, MutableRefObject, useRef, useState } from \"react\";\r\n// import styles from \"./NewTodo.module.css\";\r\n\r\n// const NewTodo: FC<{ onAddTodo: (text: string) => void }> = (props) => {\r\n// \t// const [enteredText, setEnteredText] = useState(\"\")\r\n\r\n// \tconst ref = useRef<HTMLInputElement>(null);\r\n// \tconst submitHandler = (e: React.FormEvent) => {\r\n// \t\te.preventDefault();\r\n\r\n// \t\tconst enteredText = ref.current!.value;\r\n\r\n// \t\tif (enteredText.trim().length === 0) {\r\n// \t\t\t// trow errors\r\n// \t\t\treturn;\r\n// \t\t}\r\n\r\n// \t\tprops.onAddTodo(enteredText);\r\n\r\n// \t\t// const change\r\n// \t};\r\n\r\n// \treturn (\r\n// \t\t<form className={styles.form} onSubmit={submitHandler}>\r\n// \t\t\t<label htmlFor=\"text\"></label>\r\n// \t\t\t<input type=\"text\" id=\"text\" ref={ref} />\r\n// \t\t\t<button type=\"submit\">Add todo</button>\r\n// \t\t</form>\r\n// \t);\r\n// };\r\n\r\n// export default NewTodo;\r\n\r\nimport React, { FC, useState } from \"react\";\r\nimport styles from \"./NewTodo.module.css\";\r\n\r\nconst NewTodo: FC<{ onAddTodo: (text: string) => void }> = (props) => {\r\n\tconst [enteredText, setEnteredText] = useState(\"\");\r\n\r\n\tconst submitHandler = (e: React.FormEvent) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif (enteredText.trim().length === 0) {\r\n\t\t\t// Handle errors here if needed.\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tprops.onAddTodo(enteredText);\r\n\r\n\t\t// Clear the input field by updating the state.\r\n\t\tsetEnteredText(\"\");\r\n\t};\r\n\r\n\tconst textChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetEnteredText(event.target.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form className={styles.form} onSubmit={submitHandler}>\r\n\t\t\t<label htmlFor=\"text\"></label>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tid=\"text\"\r\n\t\t\t\tvalue={enteredText}\r\n\t\t\t\tonChange={textChangeHandler}\r\n\t\t\t/>\r\n\t\t\t<button type=\"submit\">Add todo</button>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default NewTodo;\r\n"],"mappings":";;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,MAAMC,OAAkD,GAAIC,KAAD,IAAW;EAAA;;EACrE,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;;EAEA,MAAMM,aAAa,GAAIC,CAAD,IAAwB;IAC7CA,CAAC,CAACC,cAAF;;IAEA,IAAIJ,WAAW,CAACK,IAAZ,GAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;MACpC;MACA;IACA;;IAEDP,KAAK,CAACQ,SAAN,CAAgBP,WAAhB,EAR6C,CAU7C;;IACAC,cAAc,CAAC,EAAD,CAAd;EACA,CAZD;;EAcA,MAAMO,iBAAiB,GAAIC,KAAD,IAAgD;IACzER,cAAc,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;EACA,CAFD;;EAIA,oBACC;IAAM,SAAS,EAAEd,MAAM,CAACe,IAAxB;IAA8B,QAAQ,EAAEV,aAAxC;IAAA,wBACC;MAAO,OAAO,EAAC;IAAf;MAAA;MAAA;MAAA;IAAA,QADD,eAEC;MACC,IAAI,EAAC,MADN;MAEC,EAAE,EAAC,MAFJ;MAGC,KAAK,EAAEF,WAHR;MAIC,QAAQ,EAAEQ;IAJX;MAAA;MAAA;MAAA;IAAA,QAFD,eAQC;MAAQ,IAAI,EAAC,QAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QARD;EAAA;IAAA;IAAA;IAAA;EAAA,QADD;AAYA,CAjCD;;GAAMV,O;;KAAAA,O;AAmCN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}